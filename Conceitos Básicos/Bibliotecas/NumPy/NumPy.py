import numpy as np
'''
NUMPY É UMA BIBLIOTECA MUITO FAMOSA DE PYTHON QUE É USADA PRINCIPALMENTE PARA COMPUTAÇÃO NUMÉRICA E CIENTÍFICA, TRABALHANDO PRINCIPALMENTE COM OBJETOS DO TIPO ARRAY PARA REALIZAR 
OPERAÇÕES MATEMÁTICAS E ESTATÍSTICAS, MUITO IMPORTANTES PARA CIÊNCIA DE DADOS.
'''

dados = np.loadtxt('Arquivos/apples_ts.csv', delimiter=',', usecols=np.arange(1, 88, 1))
'''
AQUI, JÁ USAMOS ALGUNS MÉTODOS DO NUMPY PARA IMPORTAR DADOS DE UMA PLANILHA CSV.

loadtxt() -> FUNÇÃO NUMPY PARA ABRIR ARQUIVOS DE FORMATAÇÃO SIMPLES, COMO UM ARQUIVO CSV. AQUI, ESTÃO SENDO USADOS OS SEGUINTES PARÂMETROS PARA ESSE MÉTODO:
    CAMINHO -> O CAMINHO DO ARQUIVO ONDE SERÁ BUSCADA A INFORMAÇÃO
    DELIMITER -> O DELIMITADOR QUE IRÁ SEPARAR OS DADOS. COMO É UM CSV (COMMA SEPARATED VALUES), O DELIMITADOR DOS DADOS É UMA ','
    USERCOLS -> SE ABRIR O ARQUIVO, VERÁ QUE A PRIMEIRA COLUNA DO MESMO SÃO NOMES DE CIDADES (STRING), E O RESTANTE DOS DADOS SÃO NÚMEROS (FLOAT). AO TRABALHAR COM ARRAYS EM NUMPY, OS
                DADOS PRECISAM SER TODOS DO MESMO TIPO, ENTÃO USAMOS ESSE PARÂMETRO PARA DEFINIR A QUAIS COLUNAS SERÃO USADAS. NO CASO, FOI USADO UM OUTRO MÉTODO PARA AUXILIAR NESSE 
                MESMO PROCESSO, O 'arange()', QUE CRIA UMA ARRAY DO VALOR INICIAL (1) ATÉ O VALOR FINAL (88, POIS POSSUEM 87 COLUNAS E É NECESSÁRIO SOMAR +1 PARA QUE SEJA CONTADA A 
                ÚLTIMA), E USANDO COMO PASSO O TERCEIRO PARÂMETRO (1)

'''
'''
NO NUMPY, TRABALHAMOS COM DIMENSÕES, OU SEJA, O NÚMERO DE INFORMAÇÕES PELOS QUAIS OS DADOS ESTÃO VARIANDO. RODANDO O CÓDIGO A SEGUIR, NÓS TEMOS:
'''
#print(dados.ndim) SAÍDA: 2
'''
ESSA FUNÇÃO RETORNA A QUANTIDADE DE DIMENSÕES QUE POSSUI NO ARRAY E, NESSE CASO, SÃO DUAS DIMENSÕES, LINHAS E COLUNAS.

OUTRA COISA QUE PODEMOS VERIFICAR É A QUANTIDADE DE ELEMENTOS DENTRO DE UM ARRAY, COM A SEGUINTE FUNÇÃO:
'''
#print(dados.size) SAÍDA: 522
'''
E PODEMOS VER TAMBÉM O NÚMERO DE ELEMENTOS POR DIMENSÕES:
'''
#print(dados.shape) SAÍDA: (6, 87)
'''
OU SEJA, 6 LINHAS E 87 COLUNAS. PORÉM, PARA FICAR MELHOR DE TRABALHAR, PODEMOS TRANSPOR AS LINHAS POR COLUNAS, COM O MÉTODO DE TRANSPOSIÇÃO T:
'''
dadosTranspostos = dados.T
# print(dadosTranspostos)
# print(dadosTranspostos.shape) SAÍDA: (87, 6)
'''
AGORA, TEMOS 87 LINHAS E 6 COLUNAS, SENDO QUE TODAS AS COLUNAS REPRESENTAM OS VALORES, COM EXCEÇÃO DA PRIMEIRA, QUE REPRESENTA UMA DATA. UM FORMATO MUITO MAIS FÁCIL E INTUITIVO PARA 
TRABALHAR.
'''