import numpy as np
'''
NUMPY É UMA BIBLIOTECA MUITO FAMOSA DE PYTHON QUE É USADA PRINCIPALMENTE PARA COMPUTAÇÃO NUMÉRICA E CIENTÍFICA, TRABALHANDO PRINCIPALMENTE COM OBJETOS DO TIPO ARRAY PARA REALIZAR 
OPERAÇÕES MATEMÁTICAS E ESTATÍSTICAS, MUITO IMPORTANTES PARA CIÊNCIA DE DADOS.

ANTES DE MAIS NADA, É IMPORTANTE RESSALTAR QUE, EM PYTHON, ARRAYS E LISTAS SÃO COISAS DIFERENTES, POR MAIS QUE TENHAM SEMELHANÇAS. ARRAYS SÃO RESTRITOS A ARMAZENAR ELEMENTOS DE APENAS
UM TIPO E TÊM TAMANHO FIXO, UMA VEZ CRIADOS, NÃO PODEM SER ALTERADOS. JÁ AS LISTAS TANTO PODEM ARMAZENAR DIFERENTES TIPOS DE ELEMENTOS QUANTO PODEM SOFRER ALTERAÇÕES.
AS PRINCIPAIS VANTAGENS DO ARRAY ESTÃO NA SUA EFICIÊNCIA, SEJA EM ARMAZENAMENTO OU ACESSO AOS ELEMENTOS, DEVIDO SUAS CARACTERÍSTICAS
'''

dados = np.loadtxt('Arquivos/apples_ts.csv', delimiter=',', usecols=np.arange(1, 88, 1))
'''
AQUI, JÁ USAMOS ALGUNS MÉTODOS DO NUMPY PARA IMPORTAR DADOS DE UMA PLANILHA CSV.

loadtxt() -> FUNÇÃO NUMPY PARA ABRIR ARQUIVOS DE FORMATAÇÃO SIMPLES, COMO UM ARQUIVO CSV. AQUI, ESTÃO SENDO USADOS OS SEGUINTES PARÂMETROS PARA ESSE MÉTODO:
    CAMINHO -> O CAMINHO DO ARQUIVO ONDE SERÁ BUSCADA A INFORMAÇÃO
    DELIMITER -> O DELIMITADOR QUE IRÁ SEPARAR OS DADOS. COMO É UM CSV (COMMA SEPARATED VALUES), O DELIMITADOR DOS DADOS É UMA ','
    USERCOLS -> SE ABRIR O ARQUIVO, VERÁ QUE A PRIMEIRA COLUNA DO MESMO SÃO NOMES DE CIDADES (STRING), E O RESTANTE DOS DADOS SÃO NÚMEROS (FLOAT). AO TRABALHAR COM ARRAYS EM NUMPY, OS
                DADOS PRECISAM SER TODOS DO MESMO TIPO, ENTÃO USAMOS ESSE PARÂMETRO PARA DEFINIR A QUAIS COLUNAS SERÃO USADAS. NO CASO, FOI USADO UM OUTRO MÉTODO PARA AUXILIAR NESSE 
                MESMO PROCESSO, O 'arange()', QUE CRIA UMA ARRAY DO VALOR INICIAL (1) ATÉ O VALOR FINAL (88, POIS POSSUEM 87 COLUNAS E É NECESSÁRIO SOMAR +1 PARA QUE SEJA CONTADA A 
                ÚLTIMA), E USANDO COMO PASSO O TERCEIRO PARÂMETRO (1)

'''
'''
NO NUMPY, TRABALHAMOS COM DIMENSÕES, OU SEJA, O NÚMERO DE INFORMAÇÕES PELOS QUAIS OS DADOS ESTÃO VARIANDO. RODANDO O CÓDIGO A SEGUIR, NÓS TEMOS:
'''
#print(dados.ndim) SAÍDA: 2
'''
ESSA FUNÇÃO RETORNA A QUANTIDADE DE DIMENSÕES QUE POSSUI NO ARRAY E, NESSE CASO, SÃO DUAS DIMENSÕES, LINHAS E COLUNAS.

OUTRA COISA QUE PODEMOS VERIFICAR É A QUANTIDADE DE ELEMENTOS DENTRO DE UM ARRAY, COM A SEGUINTE FUNÇÃO:
'''
#print(dados.size) SAÍDA: 522
'''
E PODEMOS VER TAMBÉM O NÚMERO DE ELEMENTOS POR DIMENSÕES:
'''
#print(dados.shape) SAÍDA: (6, 87)
'''
OU SEJA, 6 LINHAS E 87 COLUNAS. PORÉM, PARA FICAR MELHOR DE TRABALHAR, PODEMOS TRANSPOR AS LINHAS POR COLUNAS, COM O MÉTODO DE TRANSPOSIÇÃO T:
'''
dadosTranspostos = dados.T
#print(dadosTranspostos)
# print(dadosTranspostos.shape) SAÍDA: (87, 6)
'''
AGORA, TEMOS 87 LINHAS E 6 COLUNAS, SENDO QUE TODAS AS COLUNAS REPRESENTAM OS VALORES, COM EXCEÇÃO DA PRIMEIRA, QUE REPRESENTA UMA DATA. UM FORMATO MUITO MAIS FÁCIL E INTUITIVO PARA 
TRABALHAR.

VAMOS AGORA ENTÃO SEPARAR OS VALORES EM DIFERENTES VARIÁVEIS, SENDO AS DATAS E OS PREÇOS. CONSEGUIMOS ISSO ATRAVÉSS DOS DADOS TRANSPOSTOS, SELECIONANDO AS COLUNAS E LINHA QUE QUEREMOS:
'''
datas = np.arange(1, 88)
'''CRIADO UM INTERVALO PARA QUE OS MESES SEJAM MELHOR INTERPRETADOS'''
precos = dadosTranspostos[:, 1:6]
'''
AQUI, ASSIM COMO NAS LISTAS, USAMOS OS DOIS PONTOS PARA PEGAR UMA DETERMINADO PERÍODO, SENDO QUE INFORMAMOS PRIMEIRO AS LINHAS E DEPOIS AS COLUNAS:

array[linhaInicial : linhaFinal, colunaInicial : colunaFinal]

COMO NÃO FOI INFORMADO NENHUM VALOR PARA AS LINHAS, TODAS SERÃO PEGAS.

PODEMOS TAMBÉM PEGAR RETIRAR INFORMAÇÕES DO NOSSO NOVO ARRAY DE PREÇOS, PEGANDO OS DADOS REFERENTES A CADA CIDADE:
'''
Moscow = precos[:, 0]
Kaliningrad = precos[:,1]
Petersburg = precos[:,2]
Krasnodar = precos[:,3]
Ekaterinburg = precos[:,4]

'''
PODEMOS DESTRINCHAR AINDA MAIS, SEPARANDO OS DADOS DE UMA CIDADE, MOSCOW, POR EXEMPLO, EM UM PERÍDO DE ANOS, E PODEMOS FAZER A COMPARAÇÃO ENTRE ELES:
'''
MoscowAno1 = Moscow[0:12]
MoscowAno2 = Moscow[12:24]
MoscowAno3 = Moscow[24:36]
MoscowAno4 = Moscow[36:48]
'''
AGORA, PARA EXIBIÇÃO DOS DADOS, IMPORTAREMOS UMA OUTRA BIBLIOTECA, A MATPLOTLIB, PARA VISUALIZAÇÃO DOS DADOS
'''
import matplotlib.pyplot as plt

# plt.plot(datas, precos[:,0])
# plt.show()
'''
O '.plot()' É UM DOS MÉTODOS DO PYPLOT, UM SUB-MÓDULO DO MATPLOTLIB. COM ESSE MÉTODO, PODEMOS PASSAR DOS VALORES, OS EIXOS X E Y QUE IRÃO GERAR UM GRÁFICO, QUE POR SUA VEZ SERA EXIBIDO
COM O MÉTODO '.show'
'''
# plt.plot(np.arange(1, 13, 1), MoscowAno1)
# plt.plot(np.arange(1, 13, 1), MoscowAno2)
# plt.plot(np.arange(1, 13, 1), MoscowAno3)
# plt.plot(np.arange(1, 13, 1), MoscowAno4)
# plt.legend(['Ano1', 'Ano2', 'Ano3', 'Ano4'])
# plt.show()

'''
FIZEMOS A CRIAÇÃO DO GRÁFICO, INFORMANDO OS VALORES QUE SERÃO EXBIDOS, A LEGENDA QUE ELE TERÁ, E O COMANDO PARA O GRÁFICO SER EXIBIDO
'''
'''
ALÉM DOS GRÁFICOS, PODEMOS USAR ALGUNS MÉTODOS DO NUMPAY PARA FAZER COMPARAÇÃO ENTRE ARRAYS, USANDO ALGUNS MÉTODOS COMO:
'''
# print(np.array_equal(MoscowAno3, MoscowAno4)) SAÍDA: FALSE
'''VERIFICA SE DOIS ARRAYS SÃO IGUAIS'''
#print(np.allclose(MoscowAno3, MoscowAno4, 10)) SAÍDA: TRUE
'''VERIFICA SE HÁ UMA DIFERENÇA MAIOR QUE O VALOR PASSADO ENTRE OS DOIS ARRAYS. '''

'''
AGORA, PEGANDO O EXEMPLO DA CIDADE DE KALININGRAD, AO GERARMOS UM GRÁFICO COM OS SEUS VALORES, VAMOS TER O SEGUINTE RESULTADO:
'''
# plt.plot(datas, Kaliningrad)
# plt.show()
'''
O GRÁFICO GERADO POSSUI UM ESPAÇO EM BRANCO ENTRE OS VALORES, E ISSO SE DEVE POR CAUSA DE QUE HÁ UMA NaN ENTRE O ARRAY. PARA VERIFICAR ISSO, PODEMOS FAZER FAZER DA SEGUINTE FORMA:
'''
# print(np.isnan(Kaliningrad))
# print(sum(np.isnan(Kaliningrad)))
'''
O PRIMEIRO, TRAZ O ARRAY SUBSTITUINDO OS VALORES NORMAIS POR FALSE E OS VALORES NaN POR TRUE, JÁ O SEGUNDO, IRÁ SOMAR ESSES MESMOS VALORES. COMO FALSE = 0 E TRUE = 1, CASO HOUVER UM
VALOR NaN NO ARRAY, A SOMA IRÁ DAR MAIS DE 0.
PARA CORRIGIR ESSE VALOR, BASTA FAZER A MÉDIA DOS VALORES ANTERIOR E POSTERIOR:
'''
Kaliningrad[4] = (Kaliningrad[3] + Kaliningrad[5]) /2
# print(Kaliningrad)
'''
COM O VALOR CORRIGIDO, PODEMOS FAZER UM NOVO TESTE E VERIFICAR A DIFERENÇA ENTRE AS MÉDIAS DE DUAS CIDADES, POR EXEMPLO, USANDO O MÉTODO NUMPY 'mean()', QUE TRAZ JUSTAMENTE A MÉDIA DOS
VALORES PASSADOS:
'''
# print(np.mean(Moscow)) SAÍDA: 98.89
# print(np.mean(Kaliningrad)) SAÍDA: 74.56
